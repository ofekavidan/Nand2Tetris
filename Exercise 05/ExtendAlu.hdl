// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // set shift right and shift left for y
     ShiftRight(in=y ,out=ShiftyRight);
     ShiftLeft(in=y,out=ShiftyLeft);

     // set shift right and shift left for x
     ShiftRight(in=x ,out=ShiftxRight);
     ShiftLeft(in=x ,out=ShiftxLeft);

     // then, generate the output of the shifts using instruction[4..5] 
     Mux4Way16(a=ShiftyRight, b=ShiftxRight , c=ShiftyLeft, d=ShiftxLeft, 
               sel=instruction[4..5], out=ShiftOut);


     // operate the regular ALU with the approptiate parameters
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], 
     f=instruction[1], no=instruction[0], out=RegAluOut, zr=zrAlu, ng=ngAlu);

     // choose between the ALU output and the shifts output using instruction[7..8] 
     // in addition, calculate ng based on 15th index (msb).
     Mux4Way16(a=true, b=ShiftOut, c=true, d=RegAluOut, sel=instruction[7..8],
               out=out, out[15]=ng, out[0..7]=firsthalf, out[8..15]=sechalf);

     // calculate zr
     Or8Way(in=firsthalf, out=orfirsthalf);
     Or8Way(in=sechalf, out=orsechalf);
     Not(in=orfirsthalf,out=notfirst);
     Not(in=orsechalf, out=notsec);
     And(a=notfirst,b=notsec,out=zr);
}

