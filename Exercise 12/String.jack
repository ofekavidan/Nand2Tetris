// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int sizeStr;
    field int capacityStr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0)
        {
            do Sys.error(14);     
        }
        if (maxLength = 0) {
            let maxLength = 1;

        }
        let str = Array.new(maxLength);
        let sizeStr = 0;
        let capacityStr=maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let sizeStr = 0;
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {    
        return sizeStr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j<0 | j>sizeStr){
            do Sys.error(15); // string index out of bounds         
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < 0 | j > sizeStr){
            do Sys.error(16); // string index out of bounds    
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(sizeStr < capacityStr)){// from trichotomy
            do Sys.error(17); // string is full
        }        
        do setCharAt(sizeStr,c);
        let sizeStr = sizeStr + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(sizeStr=0){
            do Sys.error(18); // string is empty
        }
        let sizeStr = sizeStr - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val

        var int val, counter, digit;
        var boolean isNegative;

        let val = 0;
        let counter = 0;
        let isNegative=false;

        if(str[0]=45){ //negative
            let isNegative = true;
            let counter = counter+1;
        }
        
        while ((counter < sizeStr) & (47 < str[counter]) & (str[counter] < 58))
        {
            let digit = str[counter]-48;
            let val = (val * 10) + digit;
            let counter = counter+1;
        }

        if(isNegative){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)

        if (~(capacityStr > 0)){
            do Sys.error(19);
        }
        let sizeStr = 0;
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }

        do intToString(val);
        return;
    }
    method void intToString(int val){
        var int lastDigit;
        var char c;

        let lastDigit = (val - ((val /10) * 10));
        let c = (lastDigit + 48);
        
        if (val < 10)
        {
            do appendChar(c);
            return;
        }   
        else {
            do intToString(val / 10);
            do appendChar(c);
        }
        return;

    }
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
