// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
    static Array ram;
    static Array heap;
    static Array freeList;
    static int lengthIndex;
    static int nextIndex;

    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram=0;
        let heap=2048;
        let freeList=heap;
        let lengthIndex = 0;
        let nextIndex = 1;
        let freeList[lengthIndex]=14335;//length
        let freeList[nextIndex]=0;//next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        //first-fit 
        var Array curNode;
        var Array prevNode;
        var Array block;
        var boolean found;
        let curNode = freeList;
        let prevNode = 0;
        let found = false;

        if(size < 1){
            do Sys.error(5);
        }
        
        while(~(curNode = 0 ) & (~(found))){ //while curNode != null
            if((curNode[lengthIndex]) = size) {
                let found=true;
                let block=curNode;

                if(curNode=freeList){
                    let freeList=curNode[nextIndex];
                }
                else{
                    let prevNode[nextIndex]=curNode[nextIndex];
                }
            }
            else{
                if((curNode[lengthIndex]) > size + 2){ //if curNode.length>size
                    let found = true;
                    let block = (curNode + curNode[lengthIndex] -(size)); //set block start//size+1?
                    let block[lengthIndex] = (size+1); //set blockSize
                    let curNode[lengthIndex] =(curNode[lengthIndex]-(size+1)); 
                }
                else{
                    let prevNode=curNode;
                    let curNode=curNode[nextIndex]; //curNode=curNode.next
                }
            } 
        }
        if(~(found)){
            return -1;
        }
        return block+1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var Array segment;

        let segment = (o-1);
        let segment[nextIndex]=freeList;
        let freeList=segment;
        return;

    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int i, arraylength;
        var int maxnum;
        let i = 0;
        let maxnum = -32767; 
        let arraylength = o[lengthIndex];

        while(~(i = arraylength)) {
            if (maxnum < (o[i])) {
                let maxnum=o[i];
            }
            let i = i + 1;
        }        
        return maxnum;
    }
}
