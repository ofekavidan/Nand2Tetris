// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static Array screen;
        static boolean color;//cur color of the screen
       
        /** Initializes the Screen. */
        static boolean WHITE;
        static boolean BLACK;
        static int SCREEN_LENGTH;
        static Array twoToThe;

        function void init() {
            let screen=16384;
            let WHITE=false;
            let BLACK=true;
            let color=true;
            let SCREEN_LENGTH=8192;
            let twoToThe= Array.new(17);
            let twoToThe[0]=1;
            let twoToThe[1]=2;
            let twoToThe[2]=4;
            let twoToThe[3]=8;
            let twoToThe[4]=16;
            let twoToThe[5]=32;
            let twoToThe[6]=64;
            let twoToThe[7]=128;
            let twoToThe[8]=256;
            let twoToThe[9]=512;
            let twoToThe[10]=1024;
            let twoToThe[11]=2048;
            let twoToThe[12]=4096;
            let twoToThe[13]=8192;
            let twoToThe[14]=16384;
            let twoToThe[15]=(^(16384));
            let twoToThe[16]=0;
            return;
        }


        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;
            let i = 0;
            while(i < SCREEN_LENGTH){
                let screen[i] = WHITE;
                let i=(i + 16);
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int address, val,xModSixteen;
            if(x<0 | y<0 | x>512 | y>256){
                do Sys.error(7);
            }

            let address= screen + (^(^(^(^(^(y)))))) + (#(#(#(#(x)))));
            let val= Memory.peek(address);
            let xModSixteen = twoToThe[x & 15];

            if(color=BLACK){
                do Memory.poke(address,val | (xModSixteen) );
            }
            else{
                do Memory.poke(address ,val & (~ xModSixteen) );
            }
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.

            var int x,y,a,b,diff,dx,dy,tempForSwap;

            if((x1=x2) & (y1=y2)){
                do Screen.drawPixel(x1,y1);
                return;
            }

            if(x2 < x1){ // swap so 2 is bigger
                let tempForSwap=x1;
                let x1=x2;
                let x2=tempForSwap;

                let tempForSwap=y1;
                let y1=y2;
                let y2=tempForSwap;
            }

            let dx = x2 - x1;
            let dy = y2 - y1;
            
            if (dx=0) {
                do Screen.drawVerLine(x1,y1,y2);
                return;
            }
            if(dy=0) {
                do Screen.drawHorizonLine(x1,x2,y1);
                return;
            }

            let x=x1;
            let y=y1;
            let a=0;
            let b=0;
            let diff=0;

            if(y1<y2){
                while ((~(a > dx)) & (~(b > dy)))  //  while ((a <= dx) and (b <= dy))
                {
                    do Screen.drawPixel((x+a), (y+b));
                    if (diff < 0)
                    { 
                        let a=a+1;
                        let diff=diff+dy;
                    }
                    else          
                    { 
                        let b=b+1;      
                        let diff=diff-dx;
                    }
                }
            }
            else{                    
                while ((~(a > dx)) & (~(b < dy)))  //  while ((a <= dx) and (b <= dy))
                {
                    do Screen.drawPixel((x+a), (y+b));
                    if (diff < 0)
                    { 
                        let a=a+1;
                        let diff=diff-dy;
                    }
                    else          
                    { 
                        let b=b-1;      
                        let diff=diff-dx;
                    }
                }
            }       
            return;
        }
        /**
        * draws a vertical line between (x,y1), (x,y2)
        */
        function void drawVerLine(int x,int y1,int y2){
            var int i, dy, minY;

            let minY = Math.min(y1,y2);
            let i=0;
            let dy= Math.abs(y1-y2);

            while(~(i>dy)){
                do Screen.drawPixel(x,minY+i);
                let i=i+1;
            }
            return;
        }
        /**
        * draws horizontal line between(x1,y), (x2,y); 
        */
        function void drawHorizonLine(int x1, int x2, int y){
            var int i, dx, minX;

            let minX = Math.min(x1,x2);
            let i=0;
            let dx= Math.abs(x1-x2);

            while(~(i>dx)){
                do Screen.drawPixel(minX+i,y);
                let i=i+1;
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {

            var int numLines; 
            var int i;
            
            let numLines= Math.abs(y1-y2);
            let i=0;
            while(i < numLines){
                do Screen.drawLine(x1,y1+i,x2,y1+i);
                let i=i+1;
            }
            
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy,halfWidth;
            if (r<181){ // saves from overflow
                let dy= (-r);
                while(~(dy > r)){
                    let halfWidth=Math.sqrt((r*r)-(dy*dy));
                    do Screen.drawLine(x-halfWidth,y+dy,x+halfWidth,y+dy);
                    let dy=dy+1;
                }
            }
            return;
        }
}